-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammar.Ident -> Result
transIdent x = case x of
  AbsGrammar.Ident string -> failure x

transProgram :: Show a => AbsGrammar.Program' a -> Result
transProgram x = case x of
  AbsGrammar.Program _ stmts -> failure x

transBlock :: Show a => AbsGrammar.Block' a -> Result
transBlock x = case x of
  AbsGrammar.Block _ stmts -> failure x

transArg :: Show a => AbsGrammar.Arg' a -> Result
transArg x = case x of
  AbsGrammar.MutableArg _ ident type_ -> failure x
  AbsGrammar.ConstArg _ ident type_ -> failure x

transElif :: Show a => AbsGrammar.Elif' a -> Result
transElif x = case x of
  AbsGrammar.Elif _ exp block -> failure x

transStmt :: Show a => AbsGrammar.Stmt' a -> Result
transStmt x = case x of
  AbsGrammar.StmtEmpty _ -> failure x
  AbsGrammar.StmtBlock _ block -> failure x
  AbsGrammar.StmtDeclNoInit _ ident type_ -> failure x
  AbsGrammar.StmtDeclInit _ ident type_ exp -> failure x
  AbsGrammar.StmtConstDecl _ ident type_ exp -> failure x
  AbsGrammar.StmtAutoDecl _ ident exp -> failure x
  AbsGrammar.StmtConstAutoDecl _ ident exp -> failure x
  AbsGrammar.StmtAssign _ ident exp -> failure x
  AbsGrammar.StmtReturn _ exp -> failure x
  AbsGrammar.StmtVoidReturn _ -> failure x
  AbsGrammar.StmtIf _ exp block elifs -> failure x
  AbsGrammar.StmtIfElse _ exp block1 elifs block2 -> failure x
  AbsGrammar.StmtWhile _ exp block -> failure x
  AbsGrammar.StmtFor _ ident exp block -> failure x
  AbsGrammar.StmtExp _ exp -> failure x
  AbsGrammar.StmtFunDef _ ident args type_ block -> failure x

transType :: Show a => AbsGrammar.Type' a -> Result
transType x = case x of
  AbsGrammar.TInt _ -> failure x
  AbsGrammar.TBool _ -> failure x
  AbsGrammar.TVoid _ -> failure x
  AbsGrammar.TString _ -> failure x
  AbsGrammar.TFunction _ types type_ -> failure x
  AbsGrammar.TList _ type_ -> failure x
  AbsGrammar.TUnknown _ -> failure x
  AbsGrammar.TAny _ -> failure x

transLiteral :: Show a => AbsGrammar.Literal' a -> Result
transLiteral x = case x of
  AbsGrammar.LitInt _ integer -> failure x
  AbsGrammar.LitBoolTrue _ -> failure x
  AbsGrammar.LitBoolFalse _ -> failure x
  AbsGrammar.LitString _ string -> failure x
  AbsGrammar.LitList _ literals -> failure x
  AbsGrammar.LitFunction _ args type_ block -> failure x

transExp :: Show a => AbsGrammar.Exp' a -> Result
transExp x = case x of
  AbsGrammar.ExpVar _ ident -> failure x
  AbsGrammar.ExpLit _ literal -> failure x
  AbsGrammar.ExpApp _ ident exps -> failure x
  AbsGrammar.ExpIndex _ exp1 exp2 -> failure x
  AbsGrammar.ExpListRange _ exp1 exp2 -> failure x
  AbsGrammar.ExpPrefixOp _ prefixop exp -> failure x
  AbsGrammar.ExpMulOp _ exp1 mulop exp2 -> failure x
  AbsGrammar.ExpAddOp _ exp1 addop exp2 -> failure x
  AbsGrammar.ExpRelOp _ exp1 relop exp2 -> failure x
  AbsGrammar.ExpAnd _ exp1 exp2 -> failure x
  AbsGrammar.ExpOr _ exp1 exp2 -> failure x

transPrefixOp :: Show a => AbsGrammar.PrefixOp' a -> Result
transPrefixOp x = case x of
  AbsGrammar.OpNeg _ -> failure x
  AbsGrammar.OpNot _ -> failure x

transAddOp :: Show a => AbsGrammar.AddOp' a -> Result
transAddOp x = case x of
  AbsGrammar.OpPlus _ -> failure x
  AbsGrammar.OpMinus _ -> failure x

transMulOp :: Show a => AbsGrammar.MulOp' a -> Result
transMulOp x = case x of
  AbsGrammar.OpTimes _ -> failure x
  AbsGrammar.OpDiv _ -> failure x
  AbsGrammar.OpMod _ -> failure x

transRelOp :: Show a => AbsGrammar.RelOp' a -> Result
transRelOp x = case x of
  AbsGrammar.OpLt _ -> failure x
  AbsGrammar.OpLe _ -> failure x
  AbsGrammar.OpGt _ -> failure x
  AbsGrammar.OpGe _ -> failure x
  AbsGrammar.OpEq _ -> failure x
  AbsGrammar.OpNeq _ -> failure x
