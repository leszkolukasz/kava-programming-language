-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language grammar.

module AbsGrammar where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = Program a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = Block a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a
    = MutableArg a Ident (Type' a) | ConstArg a Ident (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Elif = Elif' BNFC'Position
data Elif' a = Elif a (Exp' a) (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = StmtEmpty a
    | StmtBlock a (Block' a)
    | StmtDeclNoInit a Ident (Type' a)
    | StmtDeclInit a Ident (Type' a) (Exp' a)
    | StmtConstDecl a Ident (Type' a) (Exp' a)
    | StmtAutoDecl a Ident (Exp' a)
    | StmtConstAutoDecl a Ident (Exp' a)
    | StmtAssign a Ident (Exp' a)
    | StmtReturn a (Exp' a)
    | StmtVoidReturn a
    | StmtIf a (Exp' a) (Block' a) [Elif' a]
    | StmtIfElse a (Exp' a) (Block' a) [Elif' a] (Block' a)
    | StmtWhile a (Exp' a) (Block' a)
    | StmtFor a Ident (Exp' a) (Block' a)
    | StmtExp a (Exp' a)
    | StmtFunDef a Ident [Arg' a] (Type' a) (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = TInt a
    | TBool a
    | TVoid a
    | TString a
    | TFunction a [Type' a] (Type' a)
    | TList a (Type' a)
    | TUnknown a
    | TAny a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Literal = Literal' BNFC'Position
data Literal' a
    = LitInt a Integer
    | LitBoolTrue a
    | LitBoolFalse a
    | LitString a String
    | LitList a [Literal' a]
    | LitFunction a [Arg' a] (Type' a) (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Exp = Exp' BNFC'Position
data Exp' a
    = ExpVar a Ident
    | ExpLit a (Literal' a)
    | ExpApp a Ident [Exp' a]
    | ExpIndex a (Exp' a) (Exp' a)
    | ExpListRange a (Exp' a) (Exp' a)
    | ExpPrefixOp a (PrefixOp' a) (Exp' a)
    | ExpMulOp a (Exp' a) (MulOp' a) (Exp' a)
    | ExpAddOp a (Exp' a) (AddOp' a) (Exp' a)
    | ExpRelOp a (Exp' a) (RelOp' a) (Exp' a)
    | ExpAnd a (Exp' a) (Exp' a)
    | ExpOr a (Exp' a) (Exp' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type PrefixOp = PrefixOp' BNFC'Position
data PrefixOp' a = OpNeg a | OpNot a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = OpPlus a | OpMinus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = OpTimes a | OpDiv a | OpMod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a
    = OpLt a | OpLe a | OpGt a | OpGe a | OpEq a | OpNeq a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

assignAdd :: a -> Ident -> Exp' a -> Stmt' a
assignAdd = \ _a ident exp -> StmtAssign _a ident (ExpAddOp _a (ExpVar _a ident) (OpPlus _a) exp)

assignSub :: a -> Ident -> Exp' a -> Stmt' a
assignSub = \ _a ident exp -> StmtAssign _a ident (ExpAddOp _a (ExpVar _a ident) (OpMinus _a) exp)

assignMul :: a -> Ident -> Exp' a -> Stmt' a
assignMul = \ _a ident exp -> StmtAssign _a ident (ExpMulOp _a (ExpVar _a ident) (OpTimes _a) exp)

assignDiv :: a -> Ident -> Exp' a -> Stmt' a
assignDiv = \ _a ident exp -> StmtAssign _a ident (ExpMulOp _a (ExpVar _a ident) (OpDiv _a) exp)

assignMod :: a -> Ident -> Exp' a -> Stmt' a
assignMod = \ _a ident exp -> StmtAssign _a ident (ExpMulOp _a (ExpVar _a ident) (OpMod _a) exp)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Program p _ -> p

instance HasPosition Block where
  hasPosition = \case
    Block p _ -> p

instance HasPosition Arg where
  hasPosition = \case
    MutableArg p _ _ -> p
    ConstArg p _ _ -> p

instance HasPosition Elif where
  hasPosition = \case
    Elif p _ _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    StmtEmpty p -> p
    StmtBlock p _ -> p
    StmtDeclNoInit p _ _ -> p
    StmtDeclInit p _ _ _ -> p
    StmtConstDecl p _ _ _ -> p
    StmtAutoDecl p _ _ -> p
    StmtConstAutoDecl p _ _ -> p
    StmtAssign p _ _ -> p
    StmtReturn p _ -> p
    StmtVoidReturn p -> p
    StmtIf p _ _ _ -> p
    StmtIfElse p _ _ _ _ -> p
    StmtWhile p _ _ -> p
    StmtFor p _ _ _ -> p
    StmtExp p _ -> p
    StmtFunDef p _ _ _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    TInt p -> p
    TBool p -> p
    TVoid p -> p
    TString p -> p
    TFunction p _ _ -> p
    TList p _ -> p
    TUnknown p -> p
    TAny p -> p

instance HasPosition Literal where
  hasPosition = \case
    LitInt p _ -> p
    LitBoolTrue p -> p
    LitBoolFalse p -> p
    LitString p _ -> p
    LitList p _ -> p
    LitFunction p _ _ _ -> p

instance HasPosition Exp where
  hasPosition = \case
    ExpVar p _ -> p
    ExpLit p _ -> p
    ExpApp p _ _ -> p
    ExpIndex p _ _ -> p
    ExpListRange p _ _ -> p
    ExpPrefixOp p _ _ -> p
    ExpMulOp p _ _ _ -> p
    ExpAddOp p _ _ _ -> p
    ExpRelOp p _ _ _ -> p
    ExpAnd p _ _ -> p
    ExpOr p _ _ -> p

instance HasPosition PrefixOp where
  hasPosition = \case
    OpNeg p -> p
    OpNot p -> p

instance HasPosition AddOp where
  hasPosition = \case
    OpPlus p -> p
    OpMinus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    OpTimes p -> p
    OpDiv p -> p
    OpMod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    OpLt p -> p
    OpLe p -> p
    OpGt p -> p
    OpGe p -> p
    OpEq p -> p
    OpNeq p -> p

